{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "An element to transform AMF LD model into a form view model.\n\nNote, this element does not include polyfills for `Promise` and `Array.from`.\n\nThe model should be used to build a form view for request parameters\nlike header, query parameters, uri parameters or the body.\n\n### Data model\n- binding {String} - one of `path`, `query`, `header`\n- name {String} - property (form) name\n- required {Boolean} - is property required\n- value {any} - Value of the property\n- description {String} - The description of the property\n- hasDescription {Boolean} - Flag describing if the property has a\ndescription.\n- schema {Object} - Property schma information\n- schema.type {String} - Data type of the property\n- schema.inputLabel {String} Label for the form control\n- schema.inputType {String} - type attribute of the `input` element.\n- schema.pattern {String} - Regex pattern of the property\n- schema.minLength {Number} - String property minimum length\n- schema.maxLength {Number} - String property maximum length\n- schema.defaultValue {any} - Default value of the property\n- schema.examples {Array<Object>} - List of examples for the form property.\n- schema.multipleOf {Number} - For numeric values, a `step` attribute of\nthe `input` element.\nEach object may contain `name` (may be undefined) and must contain `value`\nproperty of the example.\n- schema.minimum {Number} - For numeric values, minimum value of the property\n- schema.maximum {Number} - For numeric values, maximum value of the property\n- schema.isEnum {Boolean} - Flag describing enumerable value\n- schema.enum {Array<any>} - Only if `schema.isEnum` is set. Values for enum\ninput.\n- schema.isArray {Boolean} - Flag describing array value for the property\n- schema.items {Object} - Lsit of items definitions\n- schema.isBool {Boolean} - Flag describing boolean value for the property\n- schema.inputPlaceholder {?String} - A placeholder value for the input.\n- schema.inputFloatLabel {Boolean} - Only if placeholder is set. Instructs\ninput control to float a label.\n- schema.isUnion {Boolean} - Flag describing union value\n- schema.anyOf {Array<Object>} - List of possible types of the union.\n\n## Example\n\n```html\n<api-view-model-transformer on-view-model-changed=\"_updateView\"></api-view-model-transformer>\n<script>\nconst amfModel = getAmfFromRamlOrOas();\nconst processor = document.querySelector('api-view-model-transformer');\nif (amfModel['@context']) {\n processor.amfContext = amfModel['@context'];\n}\nprocessor.amfModel = extractHeadersForMethod(amfModel);\nprocessor.addEventListener('view-model-changed', (e) => {\n console.log(e.detail.value);\n});\n< /script>\n```\n\nThis example uses `getAmfFromRamlOrOas()` function where you implement\nthe logic of getting AMF json/ld data. It can be stored in file or parsed\nusing AMF parsers. The `extractHeadersForMethod()` represents a logic to\nextract properties that you want to transform. It can be headers, query\nparameters or body type.\n\n## JSON ld context\n\nJSON schema may contain `@context` property. It can be used to reduce size\nof the schema by replacing namespace ids with defined in `@context` keywords.\nThis transformer does not consume whole AMF model, but only the portion that\nshould be transformed. Because of that the tranformer is missing context\nfor namespace resolving. Set `@context` value of the model to `amfContext`\nproperty so it can be expanded to the canonical form.\n**Tranformation won't work properly if namespace name are altered by context\nand `amfContext` property is not set.**",
      "summary": "",
      "path": "api-view-model-transformer.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 63,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\""
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 68,
              "column": 4
            },
            "end": {
              "line": 68,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "amfModel",
          "type": "Array",
          "description": "AMF model extracted from RAML or OAS spec and transformed to\nJSON/LD schema.\nThis is an array of propertues for which view model is generated.\nIt accepts model for headers, query parameters, uri parameters and\nbody.\nIf `manualModel` is not set, assigning a value to this property will\ntrigger model computation. Otherwise call `computeViewModel()`\nfunction manually to generate the model.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 6
            },
            "end": {
              "line": 131,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_amfModelChanged\""
            }
          }
        },
        {
          "name": "viewModel",
          "type": "Array.<Object>",
          "description": "Generated view model from the `amfModel`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 6
            },
            "end": {
              "line": 141,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "manualModel",
          "type": "boolean",
          "description": "If set, assigning a value to `amfModel` will not trigger view model\ncomputation.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "amfContext",
          "type": "Object",
          "description": "AMF json/ld contect to use to find keys in the model.\n\n### Example\n```javascript\n{\n \"doc\": \"http://raml.org/vocabularies/document#\",\n \"shapes\": \"http://raml.org/vocabularies/shapes#\",\n \"raml-http\": \"http://raml.org/vocabularies/http#\"\n }\n```\nThis context generate the following keys for the `amfModel`:\n- `doc:Document` as `http://raml.org/vocabularies/document#Document`\n- `shapes:NilShape` as `http://raml.org/vocabularies/shapes#NilShape`\n- `raml-http:Parameter` as `http://raml.org/vocabularies/http#Parameter`\n\nContext can be used to reduce model size by shortering namespace\ndeclaration. Setting `amfContext` allows this element to propertly\nread the schema.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 6
            },
            "end": {
              "line": 167,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 71,
              "column": 2
            },
            "end": {
              "line": 73,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 75,
              "column": 2
            },
            "end": {
              "line": 79,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 87,
              "column": 2
            },
            "end": {
              "line": 93,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 2
            },
            "end": {
              "line": 178,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ]
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 2
            },
            "end": {
              "line": 182,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ]
        },
        {
          "name": "_amfModelChanged",
          "description": "Called when either `amfModel` or `manualModel` propeties changed.\nIf `manualModel` is falsy then it calls `computeViewModel()` function.\n\nNote, this function won't be called when sub property of the model\nchange. For peformance rerasons it won't be supported.\n\nNote, `computeViewModel` is called asynchronusly so `amfContext`\nproperty can be set.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 2
            },
            "end": {
              "line": 200,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "amfModel",
              "type": "Array",
              "description": "Current AMF model"
            }
          ]
        },
        {
          "name": "computeViewModel",
          "description": "Computes view model from AMF data model. This should not be called if\n`manualModel` is not set. Use `amfModel` property instead.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 2
            },
            "end": {
              "line": 227,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "amfModel",
              "type": "?Array",
              "description": "AMF type model. If not set it uses `amfModel`\nproperty of the element."
            },
            {
              "name": "amfContext",
              "type": "?Object",
              "description": "JSON ld schema context. The same as\n`amfContext` property. Don't set the property on the element when using\nmanual model computation. Instead call this function with context."
            }
          ]
        },
        {
          "name": "_computeViewModelRecursive",
          "description": "Conputes model for each item recursively. It allows browser to return\nthe event loop and prohibit ANR to show.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 239,
              "column": 2
            },
            "end": {
              "line": 253,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items",
              "type": "Array",
              "description": "List of remanding AMF model items.\nThis shuld be copy of the model since this function removes items from\nthe list."
            },
            {
              "name": "result",
              "type": "?Array",
              "description": "Result of model comupation. It's repoted by\nthe Promise."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to thre view model."
          }
        },
        {
          "name": "uiModelForAmfItem",
          "description": "Creates a UI model item from AMF json/ld model.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 2
            },
            "end": {
              "line": 267,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "amfItem",
              "type": "Object",
              "description": "AMF model with schema for\n`http://raml.org/vocabularies/http#Parameter`"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "UI data model."
          }
        },
        {
          "name": "_uiModelForParameter",
          "description": "Creates a UI model item from AMF json/ld model for a parameter.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 2
            },
            "end": {
              "line": 317,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "amfItem",
              "type": "Object",
              "description": "AMF model with schema for\n`http://raml.org/vocabularies/http#Parameter`"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "UI data model."
          }
        },
        {
          "name": "_uiModelForPropertyShape",
          "description": "Creates a UI model item from AMF json/ld model for a parameter.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 324,
              "column": 2
            },
            "end": {
              "line": 355,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "amfItem",
              "type": "Object",
              "description": "AMF model with schema for\n`http://raml.org/vocabularies/http#Parameter`"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "UI data model."
          }
        },
        {
          "name": "_computeParameterSchema",
          "description": "Computes schema property of the view model from AMF model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 367,
              "column": 2
            },
            "end": {
              "line": 406,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "AFM json/ld model."
            },
            {
              "name": "opts",
              "type": "Object",
              "description": "Options for model generation.\n- required {Boolean} true if item is required.\n- name {String} Property name\n- valueDelimite {String}\n- decodeValues {Boolean}"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Schema part of the view model"
          }
        },
        {
          "name": "_expandSchema",
          "description": "Uses the json-ld library to expand context properties.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 412,
              "column": 2
            },
            "end": {
              "line": 427,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model"
            },
            {
              "name": "context"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to a restored object"
          }
        },
        {
          "name": "_modelHasType",
          "description": "Checks if a model has a type.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 434,
              "column": 2
            },
            "end": {
              "line": 442,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "Model to test"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Type name"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if model has a type."
          }
        },
        {
          "name": "_computeBinding",
          "description": "Computes value of the `binding` property of the UI model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 448,
              "column": 2
            },
            "end": {
              "line": 454,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "AMF item model"
            }
          ],
          "return": {
            "type": "(String | undefined)",
            "desc": "Binding property or undefined if not found."
          }
        },
        {
          "name": "_computeFormName",
          "description": "Computes fomm (parameter) name from AMF model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 460,
              "column": 2
            },
            "end": {
              "line": 466,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "AMF item model"
            }
          ],
          "return": {
            "type": "(String | undefined)",
            "desc": "Name property or undefined if not found."
          }
        },
        {
          "name": "_computeDescription",
          "description": "Computes description from AMF model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 472,
              "column": 2
            },
            "end": {
              "line": 478,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "AMF item model"
            }
          ],
          "return": {
            "type": "(String | undefined)",
            "desc": "Description property or undefined if not found."
          }
        },
        {
          "name": "_computeRequired",
          "description": "Computes rwquired property from AMF model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 484,
              "column": 2
            },
            "end": {
              "line": 490,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "AMF item model"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if the property is required."
          }
        },
        {
          "name": "_computeModelType",
          "description": "Computes type of the model. It's RAML data type property.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 496,
              "column": 2
            },
            "end": {
              "line": 515,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "Property schema."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Type of the nproperty."
          }
        },
        {
          "name": "_computeInputLabel",
          "description": "Computes form input label value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 524,
              "column": 2
            },
            "end": {
              "line": 534,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def",
              "type": "Object",
              "description": "Property definition"
            },
            {
              "name": "required",
              "type": "Boolean",
              "description": "True if the property is required"
            },
            {
              "name": "name",
              "type": "?String",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Input display name."
          }
        },
        {
          "name": "_computeShaclProperty",
          "description": "Computes the value of a property that namespace starts with\n`http://www.w3.org/ns/shacl`.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 543,
              "column": 2
            },
            "end": {
              "line": 549,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def",
              "type": "Object",
              "description": "Property AMF definition"
            },
            {
              "name": "property",
              "type": "String",
              "description": "Name of the schema."
            }
          ],
          "return": {
            "type": "(any | undefined)",
            "desc": "Value of the property or undefined if not set."
          }
        },
        {
          "name": "_computeVocabularyShapeProperty",
          "description": "Computes the value of a property that namespace starts with\n`http://raml.org/vocabularies/shapes`.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 558,
              "column": 2
            },
            "end": {
              "line": 564,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def",
              "type": "Object",
              "description": "Property AMF definition"
            },
            {
              "name": "property",
              "type": "String",
              "description": "Name of the schema."
            }
          ],
          "return": {
            "type": "(any | undefined)",
            "desc": "Value of the property or undefined if not set."
          }
        },
        {
          "name": "_computeModelEnum",
          "description": "Computes enum values for the view model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 570,
              "column": 2
            },
            "end": {
              "line": 578,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def",
              "type": "[type]",
              "description": "[description]"
            }
          ],
          "return": {
            "type": "[type]",
            "desc": "[description]"
          }
        },
        {
          "name": "_computeEnumIterator",
          "description": "Computesa value for the `enum` property in the view model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 585,
              "column": 2
            },
            "end": {
              "line": 599,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Array",
              "description": "Current model item for `shacl#in` namespace"
            },
            {
              "name": "result",
              "type": "Array",
              "description": "Collected values."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Final result."
          }
        },
        {
          "name": "_getSchemaSafeValue",
          "description": "Gets a value (`@value`) for a property without exceptions.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 607,
              "column": 2
            },
            "end": {
              "line": 617,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "Model for the value."
            },
            {
              "name": "key",
              "type": "String",
              "description": "Model key holding the value"
            }
          ],
          "return": {
            "type": "(any | undefined)"
          }
        },
        {
          "name": "_computeModelExamples",
          "description": "Computes list of examples for the Property model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 625,
              "column": 2
            },
            "end": {
              "line": 646,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "AMF property model"
            }
          ],
          "return": {
            "type": "(Array.<Object> | undefined)",
            "desc": "List of examples or `undefined` if not\ndefined."
          }
        },
        {
          "name": "_computeModelItems",
          "description": "Computes `items` property for AMF array property",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 653,
              "column": 2
            },
            "end": {
              "line": 677,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "AMF property model"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Array definition model"
          }
        },
        {
          "name": "_computePropetyShapeItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 679,
              "column": 2
            },
            "end": {
              "line": 690,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model"
            }
          ]
        },
        {
          "name": "_computeValueDelimiter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 692,
              "column": 2
            },
            "end": {
              "line": 698,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "binding"
            }
          ]
        },
        {
          "name": "_computeDecodeValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 700,
              "column": 2
            },
            "end": {
              "line": 705,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "binding"
            }
          ]
        },
        {
          "name": "_exampleAsValue",
          "description": "Parses a string from example or enum value to be used as default value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 715,
              "column": 2
            },
            "end": {
              "line": 729,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "example",
              "type": "String",
              "description": "Example value to process as a value"
            },
            {
              "name": "opts",
              "type": "Object",
              "description": "Options:\n- name {String} Processed property name\n- valueDelimiter {?String} either `:` for headers or `=` for query params\n- decodeValues {Boolean} True to url decode value."
            }
          ],
          "return": {
            "type": "[type]",
            "desc": "[description]"
          }
        },
        {
          "name": "__parseArrayExample",
          "description": "Parses example in an array type.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 740,
              "column": 2
            },
            "end": {
              "line": 751,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "example",
              "type": "String",
              "description": "An array example"
            },
            {
              "name": "processOptions"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of examples or string if cannot parse"
          }
        },
        {
          "name": "_computeModelInputType",
          "description": "Computes rendered item input field type based on RAML definition.\n\nIt will be either numeric or text. Type will be determined from\nitem's type or, in case of array, item's items property.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 763,
              "column": 2
            },
            "end": {
              "line": 771,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Property data type."
            },
            {
              "name": "items",
              "type": "?Array",
              "description": "Array items if any"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Input field type."
          }
        },
        {
          "name": "__computeInputType",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 773,
              "column": 2
            },
            "end": {
              "line": 784,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            }
          ]
        },
        {
          "name": "_computeModelPattern",
          "description": "Computes pattern for the input.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 792,
              "column": 2
            },
            "end": {
              "line": 807,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "modelType",
              "type": "String",
              "description": "Type of the property item."
            },
            {
              "name": "pattern",
              "type": "String",
              "description": "Pattern declared on the property"
            }
          ],
          "return": {
            "type": "(String | undefined)",
            "desc": "Pattern or undefined if does not exists."
          }
        },
        {
          "name": "_computeTypePlaceholder",
          "description": "Computes a placeholder value for data and time inputs.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 814,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Model type."
            }
          ],
          "return": {
            "type": "(String | undefined)",
            "desc": "Placeholder value."
          }
        },
        {
          "name": "_buildPropertyHandler",
          "description": "Handler for the `api-property-model-build` custom event.\nBuilds a property view model using event detail object as a base object.\n\nAll changes are applied to the `detail` object. Requesting element must\nuse the same object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 838,
              "column": 2
            },
            "end": {
              "line": 845,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ]
        },
        {
          "name": "buildProperty",
          "description": "Builds empty view model without traversing AMF model.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 853,
              "column": 2
            },
            "end": {
              "line": 867,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "defaults",
              "type": "?Object",
              "description": "View model with default values. This values won't\nbe set."
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Generated basic view model."
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 114,
          "column": 0
        },
        "end": {
          "line": 868,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "API Elements.ApiViewModelTransformer",
      "attributes": [
        {
          "name": "events-target",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 63,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "amf-model",
          "description": "AMF model extracted from RAML or OAS spec and transformed to\nJSON/LD schema.\nThis is an array of propertues for which view model is generated.\nIt accepts model for headers, query parameters, uri parameters and\nbody.\nIf `manualModel` is not set, assigning a value to this property will\ntrigger model computation. Otherwise call `computeViewModel()`\nfunction manually to generate the model.",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 6
            },
            "end": {
              "line": 131,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "view-model",
          "description": "Generated view model from the `amfModel`",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 6
            },
            "end": {
              "line": 141,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array.<Object>"
        },
        {
          "name": "manual-model",
          "description": "If set, assigning a value to `amfModel` will not trigger view model\ncomputation.",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 26
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "amf-context",
          "description": "AMF json/ld contect to use to find keys in the model.\n\n### Example\n```javascript\n{\n \"doc\": \"http://raml.org/vocabularies/document#\",\n \"shapes\": \"http://raml.org/vocabularies/shapes#\",\n \"raml-http\": \"http://raml.org/vocabularies/http#\"\n }\n```\nThis context generate the following keys for the `amfModel`:\n- `doc:Document` as `http://raml.org/vocabularies/document#Document`\n- `shapes:NilShape` as `http://raml.org/vocabularies/shapes#NilShape`\n- `raml-http:Parameter` as `http://raml.org/vocabularies/http#Parameter`\n\nContext can be used to reduce model size by shortering namespace\ndeclaration. Setting `amfContext` allows this element to propertly\nread the schema.",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 6
            },
            "end": {
              "line": 167,
              "column": 24
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "view-model-changed",
          "description": "Fired when the `viewModel` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "api-view-model-transformer",
      "mixins": [
        "ArcBehaviors.EventsTargetBehavior"
      ]
    }
  ]
}
